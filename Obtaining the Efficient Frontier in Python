import numpy as np
import pandas as pd
from pandas_datareader import data as wb
import matplotlib.pyplot as plt
%matplotlib inline

assets = ["PG", "^GSPC"]
pf_data = pd.DataFrame()

for a in assets:
    pf_data[a] = wb.DataReader(a, data_source = "yahoo", start = "2015-1-1")["Adj Close"]

pf_data.tail()

(pf_data / pf_data.iloc[0] * 100).plot(figsize=(10, 5))

log_returns = np.log(pf_data / pf_data.shift(1))

log_returns.mean() * 250

log_returns.cov() * 250

num_assets = len(asets)

num_assets

arr = np.random.random(2)
arr

arr[0] + arr[1]

weights = np.random.random(num_assets)
weights /= np.sum(weights)
weights

weights[0] + weights[1]

# Expected Portfolio Return:

np.sum(weights * log_returns.mean()) * 250

# Expected Portfolio Variance:

np.dot(weights.T, np.dot(log_returns.cov() * 250, weights))

# Expected Portfolio Volatility:

np.sqrt(np.dot(weights.T, np.dot(log_returns.cov() * 250, weights)))

pfolio_returns = []
pfolio_volatilities = []

for x in range (1000):
    weights = np.random.random(num_assets)
    weights /= np.sum(weights)
    pfolio_returns.append(np.sum(weights * log_returns.mean()) * 250)
    pfolio_volatilities.append(np.sqrt(np.dot(weights.T, np.dot(log_returns.cov() * 250, weights))))

pfolio_returns, pfolio_volatilities

pfolio_returns = []
pfolio_volatilities = []

for x in range (1000):
    weights = np.random.random(num_assets)
    weights /= np.sum(weights)
    pfolio_returns.append(np.sum(weights * log_returns.mean()) * 250)
    pfolio_volatilities.append(np.sqrt(np.dot(weights.T, np.dot(log_returns.cov() * 250, weights))))
    
pfolio_returns = np.array(pfolio_returns)
pfolio_volatilities = np.array(pfolio_volatilities)

pfolio_returns, pfolio_volatilities

portfolios = pd.DataFrame({"Return": pfolio_returns, "Volatility:": pfolio_volatilities})

portfolios.head()

portfolios.tail()

portfolios.plot(x = "Volatility", y = "Return", kind = "scatter", figsize(10, 6));
plt.xlabel("Expected Volatility")
plt.ylabel("Expected Return")
